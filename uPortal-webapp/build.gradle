apply plugin: 'war'
apply plugin: 'com.moowork.node'

description = "Apereo uPortal Webapp (WAR)"

/*
 * TODO:  Groovy-based tests (in src/test/groovy) are not currently run by the Gradle build.
 */

// Support for filtering properties files
import org.apache.tools.ant.filters.ReplaceTokens

dependencies {
    compile project(':uPortal-groups:uPortal-groups-filesystem')
    compile project(':uPortal-groups:uPortal-groups-grouper')
    compile project(':uPortal-groups:uPortal-groups-ldap')
    compile project(':uPortal-groups:uPortal-groups-local')
    compile project(':uPortal-groups:uPortal-groups-smartldap')
    compile project(':uPortal-portlets')
    compile project(':uPortal-security:uPortal-security-authn')
    compile project(':uPortal-security:uPortal-security-xslt')
    compile project(':uPortal-soffit:uPortal-soffit-connector')
    compile project(':uPortal-utils:uPortal-utils-jmx')

    testCompile "org.apache.portals.pluto:pluto-container-api:${plutoVersion}"
    testCompile "org.apache.portals.pluto:pluto-container-driver-api:${plutoVersion}"
    testCompile "org.skyscreamer:jsonassert:${jsonassertVersion}"
    testCompile "${portletApiDependency}"
    testCompile "${servletApiDependency}"

    runtime "ch.qos.logback:logback-classic:${logbackVersion}"
    runtime "joda-time:joda-time-jsptags:${jodaTimeJsptagsVersion}"
    runtime "org.aspectj:aspectjweaver:${aspectjVersion}"
    runtime "org.codehaus.groovy:groovy-jsr223:${groovyVersion}"
    runtime "org.hibernate:hibernate-entitymanager:${hibernateVersion}"
    runtime("org.jasig.cas.client:cas-client-support-distributed-ehcache:${casClientVersion}") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    runtime "org.jasig.ehcache:ehcache-jgroups3replication:${ehcacheJgroups3ReplicationVersion}"
    runtime("org.jasig.portlet.utils:portlet-ws-util:${apereoPortletUtilsVersion}") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    runtime "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    runtime "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    runtime "org.springframework.security:spring-security-config:${springSecurityVersion}"
    runtime "com.thoughtworks.xstream:xstream:${xstreamVersion}"

    /*
     * The HSQL driver jar should always be included with 'vanilla' uPortal
     * from Apereo;  aditional JDBC drivers may be added in the overlay process
     */
   // runtime "org.hsqldb:hsqldb:${hsqldbVersion}"
    runtime "com.oracle:ojdbc6:${oracleJdbcVersion}"
   //runtime "com.oracle:ojdbc7:${oracleJdbcVersion}"
   
   //runtime "com.oracle:ojdbc14:${oracleJdbcVersion}"

    /*
     * Additional runtime dependencies that were present in uP 4.3.x and may
     * (or may not) be needed at this point.
     */
    // runtime "jline:jline:${jlineVersion}"
    // runtime "org.codehaus.groovy:groovy-xml:${groovyVersion}"
    // runtime "org.fusesource.jansi:jansi:${jansiVersion}"
    // runtime("org.jasig.cas:cas-server-extension-clearpass:${casServerVersion}") {
    //     // NOTE:  ClearPass is no longer a feature of CAS,
    //     // and uPortal already supports the new mechanism
    //     exclude group: 'org.jasig.cas', module: 'cas-server-core'
    //     exclude group: 'javax.validation', module: 'validation-api'
    //     exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    // }
}

node {
    version = '8.0.0'
    download = true
}

 def envProp =  new Properties()
 file("../filters/local.properties").withInputStream{envProp.load(it);}

processResources {
    filter(ReplaceTokens, tokens:['projectVersion': project.version])
    filter(ReplaceTokens, tokens: envProp)
    
     def portalProp =  new Properties()
 	 file("/src/main/resources/properties/portal.properties").withInputStream{portalProp.load(it);}
 	 filter(ReplaceTokens, tokens: portalProp)
}

war {
    // Add generated CSS for Respondr skins to the war file
    with {
        from 'build/generated-sources/skin/main/webapp'
        into '/'
    }
    
    //properties filtering in web.xml
    filesMatching("**/*.xml") {filter(ReplaceTokens, tokens: envProp)}
}

/*
 * Aggregate Respondr Skins
 *
 * The following sections are a gradle-based replacement for the
 * 'resource-server-plugin' (Maven) used by uportal-war to aggregate
 * and minify JS
 */
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.jasig.resourceserver:resource-server-core:${resourceServerVersion}") {
            exclude group: 'commons-logging', module: 'commons-logging'
        }
    }
}
import org.jasig.resource.aggr.AggregationRequest;
import org.jasig.resource.aggr.ResourcesAggregator;
import org.jasig.resource.aggr.ResourcesAggregatorImpl;
task aggregateRespondrSkins {
    doLast {
        final ResourcesAggregator aggr = new ResourcesAggregatorImpl();
        aggr.setDisplayJsWarnings(false);

        final File resourcesXmlFile = new File(projectDir, 'src/main/webapp/media/skins/respondr/defaultSkin/skin.xml');
        final File fullOutputDirectory = new File(buildDir, 'generated-sources/skin/main/webapp/media/skins/respondr/defaultSkin');
        final File sharedJavaScriptDirectory = new File(buildDir, 'generated-sources/skin/main/webapp/media/skins/respondr');

        // Provide the paths we evaluated in DEBUG logging
        logger.debug("resourcesXmlFile=${resourcesXmlFile}");
        logger.debug("fullOutputDirectory=${fullOutputDirectory}");
        logger.debug("sharedJavaScriptDirectory=${sharedJavaScriptDirectory}");

        final AggregationRequest aggregationRequest = new AggregationRequest();
        aggregationRequest
                .setResourcesXml(resourcesXmlFile)
                .setOutputBaseDirectory(fullOutputDirectory)
                .addAdditionalSourceDirectory(fullOutputDirectory)
                .setSharedJavaScriptDirectory(sharedJavaScriptDirectory);
        aggr.aggregate(aggregationRequest);

    }
}

// Generate CSS for Respondr skins
aggregateRespondrSkins.dependsOn('npm_run_compile-less')
processResources.dependsOn(aggregateRespondrSkins)
